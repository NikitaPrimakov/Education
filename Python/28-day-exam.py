# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1

# –ó–≤—ë–∑–¥–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ ‚≠êüå∂Ô∏è

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é draw_triangle(), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∑–≤—ë–∑–¥–Ω—ã–π —Ä–∞–≤–Ω–æ–±–µ–¥—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å
# –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –∏ –≤—ã—Å–æ—Ç–æ–π, —Ä–∞–≤–Ω—ã–º–∏ 15 –∏ 8 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ:


#        *
#       ***
#      *****
#     *******
#    *********
#   ***********
#  *************
# ***************

# –ø—Ä–æ–±–µ–ª * (8 - —Å—á–µ—Ç—á–∏–∫) + –∑–≤–µ–∑–¥–∞ *(—Å—á–µ—Ç—á–∏–∫ +(—Å—á–µ—Ç—á–∏–∫ - 1))

def draw_triangle():

    for i in range(8):

        print( ' ' * (7 - i) +  (2 * i + 1) * '*')

draw_triangle()
#---------------------------------------------------
# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ üõµ
# –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç —ç–∫—Å–ø—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —Å–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ 1000 —Ä—É–±–ª–µ–π –∑–∞ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∏ 120 —Ä—É–±–ª–µ–π –∑–∞ 
# –∫–∞–∂–¥—ã–π –ø–æ—Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä. –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_shipping_cost(quantity), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ 
# –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ quantity ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ ‚Äì –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏.


def get_shipping_cost(quantity):

    cost_of_120 = (quantity - 1) * 120
    cost_of_1000 = 1 * 1000
    over_cost = cost_of_1000 + cost_of_120
    return over_cost


quantity = int(input())
print(get_shipping_cost(quantity))
#---------------------------------------------------
# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 3
import math

# –ë–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç üå∂Ô∏è

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é compute_binom(n, k), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ n –∏ k –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 
# –∑–Ω–∞—á–µ–Ω–∏–µ –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞


def compute_binom(n, k):

    binom_value = math.factorial(n) / (math.factorial(k) * math.factorial(n - k))
    return int(binom_value)

n = int(input())
k = int(input())
print(compute_binom(n, k))
#---------------------------------------------------
# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 4

# –ò—Å–∫–æ–º—ã–π –º–µ—Å—è—Ü üìÖ

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_month(language, number), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ language ‚Äì —è–∑—ã–∫ ru –∏–ª–∏ en –∏ 
# number ‚Äì –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ (–æ—Ç 1 –¥–æ 12 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.

def get_month(language, number):

    if language == 'ru':
        ru = ['', '—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å', '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', 
          '–¥–µ–∫–∞–±—Ä—å']
        return ru[number]
    elif language == 'en':
        en = [ '', 'january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 
              'november', 'december']
        return en[number]

language = input()
number = int(input())
print(get_month(language, number))
#---------------------------------------------------
# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 5


# –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—ã ‚ú®

# –ú–∞–≥–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ ‚Äì —ç—Ç–æ –¥–∞—Ç–∞, –∫–æ–≥–¥–∞ –¥–µ–Ω—å, —É–º–Ω–æ–∂–µ–Ω–Ω—ã–π –Ω–∞ –º–µ—Å—è—Ü, —Ä–∞–≤–µ–Ω —á–∏—Å–ª—É, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –¥–≤—É–º—è —Ü–∏—Ñ—Ä–∞–º–∏ 
# –≥–æ–¥–∞.

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_magic(date), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç—ã –∏ 
# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –¥–∞—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –º–∞–≥–∏—á–µ—Å–∫–æ–π, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

# print(is_magic('10.06.1960'))
# print(is_magic('11.06.1960'))

def is_magic(date):

    date_new = date.split('.')
    
    for i in range(len(date_new)):
        date_new[i] = int(date_new[i])

    day = date_new[0]
    month = date_new[1]
    year = date_new[2]
    last_two = year % 100

    if day * month == last_two:
        return True
    else:
        return False
    
date = input()
print(is_magic(date))
#---------------------------------------------------
# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 6


#  –ß–∏—Å–ª–æ —Å–ª–æ–≤–∞–º–∏ üå∂Ô∏è

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é number_to_words(num), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ num –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ 
# —Å–ª–æ–≤–µ—Å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ —á–∏—Å–ª–æ 1 ‚â§ num ‚â§ 99.

# def number_to_words(num):
     
#      if 1 <= num <= 99:
         
#          number = {1: '–æ–¥–∏–Ω', 2: '–¥–≤–∞', 3: '—Ç—Ä–∏', 4: '—á–µ—Ç—ã—Ä–µ', 5: '–ø—è—Ç—å', 6: '—à–µ—Å—Ç—å', 7: '—Å–µ–º—å', 8: '–≤–æ—Å–µ–º—å', 
#                    9: '–¥–µ–≤—è—Ç—å', 10: '–¥–µ—Å—è—Ç—å', 11: '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å', 12: '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å', 13: '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å', 14: '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å', 
#                    15: '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', 16: '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å',17: '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', 18: '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', 19: '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', 
#                    20: '–¥–≤–∞–¥—Ü–∞—Ç—å', 30: '—Ç—Ä–∏–¥—Ü–∞—Ç—å', 40: '—Å–æ—Ä–æ–∫', 50: '–ø—è—Ç—å–¥–µ—Å—è—Ç', 60: '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', 70: '—Å–µ–º—å–¥–µ—Å—è—Ç', 
#                    80: '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', 90: '–¥–µ–≤—è–Ω–æ—Å—Ç–æ'}
         
# 1 –≤–∞—Ä–∏–∞–Ω—Ç
#---------
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def number_to_words(num):
    before_twenty = [
        '', '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–µ—Ç—ã—Ä–µ', '–ø—è—Ç—å', '—à–µ—Å—Ç—å', '—Å–µ–º—å', '–≤–æ—Å–µ–º—å', '–¥–µ–≤—è—Ç—å', '–¥–µ—Å—è—Ç—å', '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å', '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å',
        '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å', '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å', '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å'
    ]
    after_twenty = [
        '–¥–≤–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–¥—Ü–∞—Ç—å', '—Å–æ—Ä–æ–∫', '–ø—è—Ç—å–¥–µ—Å—è—Ç',
        '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', '—Å–µ–º—å–¥–µ—Å—è—Ç', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ'
    ]

    if num < 20:
        res = before_twenty[num]
    else:
        res = after_twenty[num // 10 - 2] + " " + before_twenty[num % 10]

    return res.strip()


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(number_to_words(n))


# 2 –≤–∞—Ä–∏–∞–Ω—Ç (–º–æ–π)
#---------------

def number_to_words(num):

    number = {1: '–æ–¥–∏–Ω', 2: '–¥–≤–∞', 3: '—Ç—Ä–∏', 4: '—á–µ—Ç—ã—Ä–µ', 5: '–ø—è—Ç—å', 6: '—à–µ—Å—Ç—å', 7: '—Å–µ–º—å', 8: '–≤–æ—Å–µ–º—å', 
          9: '–¥–µ–≤—è—Ç—å', 10: '–¥–µ—Å—è—Ç—å', 11: '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å', 12: '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å', 13: '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å', 14: '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å', 
          15: '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', 16: '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å',17: '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', 18: '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', 19: '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', 
          20: '–¥–≤–∞–¥—Ü–∞—Ç—å', 30: '—Ç—Ä–∏–¥—Ü–∞—Ç—å', 40: '—Å–æ—Ä–æ–∫', 50: '–ø—è—Ç—å–¥–µ—Å—è—Ç', 60: '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', 70: '—Å–µ–º—å–¥–µ—Å—è—Ç', 
          80: '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', 90: '–¥–µ–≤—è–Ω–æ—Å—Ç–æ'}
    
    if 20 < num <= 99:

        if num % 10 == 0:
            result = number[num]
            return result
        else:
            last_digit = num % 10
            num = (num // 10) * 10
            result = number[num] + " " + number[last_digit]
            return result
    else:
        result = number[num]
        return result


num = int(input())
print(number_to_words(num))
#---------------------------------------------------
# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 7


# –ü–∞–Ω–≥—Ä–∞–º–º—ã üå∂Ô∏è

# –ü–∞–Ω–≥—Ä–∞–º–º–∞ ‚Äì —ç—Ç–æ —Ñ—Ä–∞–∑–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –≤ —Å–µ–±–µ –≤—Å–µ –±—É–∫–≤—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞. –û–±—ã—á–Ω–æ –ø–∞–Ω–≥—Ä–∞–º–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–æ–≤, 
# —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≥–ª–∏—Ñ—ã.

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_pangram(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏ 
# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–∞–Ω–≥—Ä–∞–º–º–æ–π, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤–≤–µ–¥—ë–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏ –ø—Ä–æ–±–µ–ª—ã.


# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_pangram(text):
    text = text.lower()
    for i in range(ord("a"), ord("z") + 1):
        if chr(i) not in text:
            return False
    
    return True

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
text = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_pangram(text))