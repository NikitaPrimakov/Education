# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1

# Is the Triangle Valid?

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_valid_triangle(side1, side2, side3), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ 
# —Ç—Ä–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–µ–≤—ã—Ä–æ–∂–¥–µ–Ω–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ 
# —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ side1, side2, side3, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –° –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ–π –º—ã —É–∂–µ —Å—Ç–∞–ª–∫–∏–≤–∞–ª–∏—Å—å –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ —É—Å–ª–æ–≤–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.


def is_valid_triangle(side1, side2, side3):

    if (side1 + side2) > side3 and (side1+side3) > side2 and (side2+side3) > side1:
        return True

    else: 
        return False
    

side1 = int(input())
side2 = int(input())
side3 = int(input())

print(is_valid_triangle(side1, side2, side3))

#----------------------------------------------------------------

# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2


# Is the Number Prime? üå∂Ô∏è

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_prime(num), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏ 
# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ —á–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.


def is_prime(num):

    count = 0
    
    if num == 1:
        return False
    
    if num > 1:
        for i in range(1, num + 1):
            if num % i == 0:
                count += 1
    
    if count == 2:
        return True
    else:
        return False

            

num = int(input())
print(is_prime(num))
#----------------------------------------------------------------

# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 3

# Next Prime üå∂Ô∏èüå∂Ô∏è

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_next_prime(num), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ 
# num –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ–µ —á–∏—Å–ª–∞ num.
def is_prime(num):
    if num == 1:
        return False
    if num > 1:
        for i in range(2, num): # –¥–µ–ª–∏—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –∫—Ä–æ–º–µ 1 –∏ —Å–µ–±—è
            if num % i == 0:
                return False
        return True # —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º –∏–ª–∏ –Ω–µ—Ç
    

def get_next_prime(num):

    next_num = num + 1

    while num > 0:
        
        if is_prime(next_num):
            return next_num
        else:
            next_num += 1
            continue
    

num = int(input())
print(get_next_prime(num))
#----------------------------------------------------------------

# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 3

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_password_good(password), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ 
# –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è password –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–¥—ë–∂–Ω—ã–º, –∏–ª–∏ False –≤ 
# –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

# –ü–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–¥—ë–∂–Ω—ã–º, –µ—Å–ª–∏:

    # –µ–≥–æ –¥–ª–∏–Ω–∞ –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤; 
    # –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É (–≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä); 
    # –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä);
    # –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.

def is_password_good(password):
    if len(password) < 8:
        return False
    
    has_upper = False
    has_lower = False
    has_digit = False
    
    for char in password:
        if char.isupper():
            has_upper = True
        elif char.islower():
            has_lower = True
        elif char.isdigit():
            has_digit = True
    
    return has_upper and has_lower and has_digit


password = input()
print(is_password_good(password))
#----------------------------------------------------------------

# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 4

# –†–æ–≤–Ω–æ –≤ –æ–¥–Ω–æ–º 1Ô∏è‚É£

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_one_away(word1, word2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ —Å–ª–æ–≤–∞ 
# word1 –∏ word2. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ —Å–ª–æ–≤–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É –∏ 
# –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º –Ω–∞ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –ø–æ–∑–∏—Ü–∏–∏, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.


def is_one_away(word1, word2):

    count = 0

    if len(word1) == len(word2):
        for i in range(len(word1)):
            if word1[i] == word2[i]:
                count += 1
            
        if count == len(word1) - 1:
            return True
        else:
            return False
    else:
        return False
    
word1 = input()
word2 = input()
print(is_one_away(word1, word2))
#----------------------------------------------------------------

# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 4


# –ü–∞–ª–∏–Ω–¥—Ä–æ–º üå∂Ô∏è

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_palindrome(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É text –∏ 
# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º 
# —Å–ª—É—á–∞–µ.


def is_palindrome(text):

    list_one = []

    for i in range(len(text)):

        text_lower = text.lower()

        if text_lower[i].isalpha():
            list_one.append(text_lower[i])

    if list_one == list_one[-1::-1]:
        return True
    else:
        return False

text = input()
print(is_palindrome(text))
#----------------------------------------------------------------

# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 5

# BEEGEEK üêùüå∂Ô∏è

# BEEGEEK –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –æ—Ç–∫—Ä—ã–ª —Å–≤–æ–π –±–∞–Ω–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–∞–Ω–∫–æ–º–∞—Ç—ã —Å –Ω–µ–æ–±—ã—á–Ω—ã–º 
# –ø–∞—Ä–æ–ª–µ–º.

# –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å BEEGEEK –±–∞–Ω–∫–∞ –∏–º–µ–µ—Ç –≤–∏–¥ a:b:c, –≥–¥–µ a, b –∏ c ‚Äì –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞. –ü–æ—Å–∫–æ–ª—å–∫—É 
# –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å BEEGEEK —Ñ–∞–Ω–∞—Ç–µ–µ—Ç –æ—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, —Ç–æ –æ–Ω —Ä–µ—à–∏–ª:

    # —á–∏—Å–ª–æ a ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º;
    # —á–∏—Å–ª–æ b ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º;
    # —á–∏—Å–ª–æ c ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á—ë—Ç–Ω—ã–º.

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_valid_password(password), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ 
# –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è password –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º 
# BEEGEEK –±–∞–Ω–∫–∞, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

def is_valid_password(password):

    if password.count(':') > 2:
        return False
    else:
        password_new = password.split(':')
        a = password_new[0]
        b = password_new[1]
        c = password_new[2]

        if a == a[-1::-1] and int(c) % 2 == 0:
            if int(b) == 1:
                return False
            for i in range(2, int(b)):
                if int(b) % i == 0 and int(b):
                    return False
            return True
        else:
            return False
            
password = input()
print(is_valid_password(password))
#----------------------------------------------------------------

# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 6


# –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∫–æ–±–æ—á–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å üå∂Ô∏è

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_correct_bracket(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ–ø—É—Å—Ç—É—é 
# —Å—Ç—Ä–æ–∫—É text, —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ ( –∏ ) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –ø–æ—Å—Ç—É–ø–∏–≤—à–∞—è –Ω–∞ –≤—Ö–æ–¥ 
# —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∫–æ–±–æ—á–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∫–æ–±–æ—á–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è —Ç–æ–ª—å–∫–æ –∏–∑ 
# —Å–∏–º–≤–æ–ª–æ–≤ ( –∏ ), –≥–¥–µ –∫–∞–∂–¥–æ–π –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–µ –Ω–∞–π–¥—ë—Ç—Å—è –ø–∞—Ä–Ω–∞—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ (–ø—Ä–∏ —ç—Ç–æ–º 
# –∫–∞–∂–¥–∞—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–µ–≤–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –µ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏).

def is_correct_bracket(text):
    count = 0
    
    for i in range(len(text)):
        if text[i] == '(':
            count += 1
        elif text[i] == ')':
            count -= 1
            if count < 0:
                return False

    if count == 0:
        return True
    else:
        return False

text = input()
#----------------------------------------------------------------

# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 6

# –ó–º–µ–∏–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä üêç
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é convert_to_python_case(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É –≤ 
# ¬´–≤–µ—Ä–±–ª—é–∂—å–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ¬ª –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ ¬´–∑–º–µ–∏–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä¬ª.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü–æ—á–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å—Ç–∏–ª—è—Ö –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥:

# print(convert_to_python_case('ThisIsCamelCased'))
# print(convert_to_python_case('IsPrimeNumber'))


def convert_to_python_case(text):
    
    string_new = ''
    string_new += text[0].lower()

    for i in range(0, len(text)):

        if text[i].isupper() and i != 0:
            string_new += '_' + text[i].lower()

        if text[i].islower():
            string_new += text[i]
    
        if text[i] in '0123456789':
            string_new += text[i]

    return string_new


text = input()
print(convert_to_python_case(text))


