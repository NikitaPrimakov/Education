# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1

# –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é convert_to_miles(km), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ 
# –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–∏–ª—è—Ö. –§–æ—Ä–º—É–ª–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: 
# 
# –º–∏–ª–∏ = –∫–∏–ª–æ–º–µ—Ç—Ä—ã * 0.6214.


def convert_to_miles(km):

    return km * 0.6214


num = float(input("Enter value of km: "))

print(convert_to_miles(num)) # –≤—ã–≤–æ–¥ –ø—Ä–∏ 10 -> 6.2139999999999995
                            # –Ω—É–∂–Ω—ã–π –≤—ã–≤–æ–¥ 6.214

#----------------------------------------------------------------

# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_days(month), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –∏ 
# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –¥–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 12 
# (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –≥–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–≤–∏—Å–æ–∫–æ—Å–Ω—ã–º.


def get_days(month):

    if month in [1, 3, 5, 7, 8, 10, 12]:
        return 31
    if month in [2]:
        return 28
    else:
        return 30
    

month = int(input("Enter num of month: "))
print(get_days(month))

#----------------------------------------------------------------

# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 3


# –î–µ–ª–∏—Ç–µ–ª–∏ 1

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_factors(num), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏ 
# –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ–ª–∏—Ç–µ–ª–µ–π –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞.


def get_factors(num):

    list_of_factors = []

    for i in range(1, num + 1):

        if num % i == 0:

            list_of_factors.append(i)

    return list_of_factors



num = int(input("Enter your num: "))
print(get_factors(num))

#----------------------------------------------------------------

# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 4


# –î–µ–ª–∏—Ç–µ–ª–∏ 2

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é number_of_factors(num), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é 
# –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ª–∏—Ç–µ–ª–µ–π –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é get_factors(num) –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏.

def get_factors(num):

    count = 0

    for i in range(1, num + 1):

        if num % i == 0:

            count += 1

    return count

num = int(input("Enter your num: "))

print(get_factors(num))


#----------------------------------------------------------------

# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 5


# –ù–∞–π—Ç–∏ –≤—Å–µ—Ö

# –ù–∞–ø–æ–º–Ω–∏–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ find('a') –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ a –≤ 
# —Å—Ç—Ä–æ–∫–µ. –ü—Ä–æ–±–ª–µ–º–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∞.

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–º–µ–Ω–µ–º find_all(target, symbol), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: —Å—Ç—Ä–æ–∫—É 
# target –∏ —Å–∏–º–≤–æ–ª symbol –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ 
# —Å—Ç—Ä–æ–∫–µ.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–µ, —Ç–æ —Å–ª–µ–¥—É–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.

def find_all(target, symbol):

    list_one = []

    for i in range(len(target)):

        if target[i] == symbol:

            list_one.append(i)

    return list_one


target = input()
symbol = input()

print(find_all(target, symbol))
#----------------------------------------------------------------

# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 6


# Merge lists 1

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é merge(list1, list2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ 
# –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Å–ø–∏—Å–∫–∞, —Å–æ—Å—Ç–æ—è—â–∏—Ö –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö –≤ –æ–¥–∏–Ω 
# –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ sort(), –∞ –º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏—Å—å –∏ –±–µ–∑ –Ω–µ–≥–æ. üòé

def merge(list1, list2):

    list3 = list1 + list2
    list3.sort()
    return list3



list1 = input().split()
for i in range(len(list1)):
    list1[i] = int(list1[i])

list2 = input().split()
for i in range(len(list2)):
    list2[i] = int(list2[i])

print(merge(list1, list2))
#----------------------------------------------------------------

# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 7

# Merge lists 2

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è —á–∏—Å–ª–æ n, –∞ –∑–∞—Ç–µ–º n —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –≤ –ø–æ—Ä—è–¥–∫–µ 
# –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è. –ò–∑ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è —Å–ø–∏—Å–∫–∏ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç 
# —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ quick_merge(), –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç 
# –µ–≥–æ.


def quick_merge(n):

    list_one = []
    list_two = []

    for i in range(1, n + 1):

        string = input()

        for i in string:
            list_one.append(i)

    list_two += list_one

    for i in range(len(list_two)):
        list_two[i] = int(list_two[i])

    list_two.sort()
    return list_two

n = int(input())

print(*quick_merge(n))


# 2-–æ–π –≤–∞—Ä–∏–∞–Ω—Ç


def quick_merge(list1, list2):
    result = []
    p1 = 0  # —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ list1
    p2 = 0  # —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ list2

    while p1 < len(list1) and p2 < len(list2):  # –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∏–∑ —Å–ø–∏—Å–∫–æ–≤
        if list1[p1] <= list2[p2]:
            result.append(list1[p1])
            p1 += 1
        else:
            result.append(list2[p2])
            p2 += 1

    if p1 < len(list1):   # –ø—Ä–∏—Ü–µ–ø–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞
        result += list1[p1:]
    else:                 # –∏–Ω–∞—á–µ –ø—Ä–∏—Ü–µ–ø–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –¥—Ä—É–≥–æ–≥–æ —Å–ø–∏—Å–∫–∞
        result += list2[p2:]
    
    return result


n = int(input())
total_list = []

for _ in range(n):
    num_list = [int(q) for q in input().split()]
    total_list = quick_merge(total_list, num_list)

print(*total_list)


# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:

#   –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ (total_list –∏ num –º–æ–≥—É—Ç –∑–∞–ø—É—Ç—ã–≤–∞—Ç—å)
#   –í —Ü–∏–∫–ª–µ –≤–≤–æ–¥–∞ —Å—Ä–∞–∑—É –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å –∞–∫–∫—É–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
#   –ò—Å–ø—Ä–∞–≤–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ —Ü–∏–∫–ª–µ –≤–≤–æ–¥–∞ —Å num –Ω–∞ num_list –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
#   –ü–µ—Ä–µ–Ω–µ—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é total_list –ø–µ—Ä–µ–¥ —Ü–∏–∫–ª–æ–º –≤–≤–æ–¥–∞
#   –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.