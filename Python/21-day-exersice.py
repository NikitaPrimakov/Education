# Упражнение №1

# Построчный вывод

# На вход программе подаётся строка текста. Напишите программу, которая выводит слова введённой строки в 
# столбик.

# Формат входных данных

str_one = input("Enter  your string: ")

print(*str_one.split(), sep="\n")

#------------------------------------

# Упражнение №2

# Инициалы

# На вход программе подаётся строка текста, содержащая имя, отчество и фамилию человека. 
# Напишите программу, которая выводит инициалы человека.

str_one = input().split()

str_two = list()

for i in str_one:

    str_two.append(i[0])


print('.'.join(str_two), ".", sep='')

#------------------------------------

# Упражнение №3

# Windows OS

# В операционной системе Windows полное имя файла состоит из буквы диска, после которого ставится двоеточие 
# и символ  \,  затем через такой же символ перечисляются подкаталоги (папки), в которых находится файл, в 
# конце пишется имя файла (C:\Windows\System32\calc.exe).

# На вход программе подаётся одна строка с корректным именем файла в операционной системе Windows. 
# Напишите программу, которая разбирает строку на части, разделенные символом \. Каждую часть вывести в 
# отдельной строке.

# Формат входных данных
# На вход программе подаётся одна строка.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# Примечание. В Python символ \ обычно используется для создания специальных символьных последовательностей,
#  которые представляют собой управляющие символы или экранированные последовательности. Например, 
# \n представляет символ новой строки, \t представляет символ табуляции и так далее. Однако если символ 
# \ используется как часть строки, его следует экранировать, то есть использовать два обратных слэша \\.


path_windows = input("Enter correct path to file: ").split("\\")

print(*path_windows, sep='\n')

#------------------------------------

# Упражнение №4

# Диаграмма

# На вход программе подаётся строка текста, содержащая целые числа. Напишите программу, которая по заданным 
# числам строит столбчатую диаграмму.

# Формат входных данных
# На вход программе подаётся строка текста, содержащая натуральные числа, разделённые символом пробела.

str_of_num = input().split()

for i in range(len(str_of_num)):

    str_of_num[i] = int(str_of_num[i])

for j in str_of_num:

    print('+' * j)

#------------------------------------

# Упражнение №5

# Корректный ip-адрес

# На вход программе подаётся строка текста, содержащая 4 целых неотрицательных числа, разделённых точкой. 
# Напишите программу, которая определяет, является ли введённая строка текста корректным ip-адресом.

# Примечание. ip-адрес является корректным, если все 4 числа находятся в диапазоне от 0 до 255 включительно.

str_of_ip = input().split('.')

flag = True

for i in range(len(str_of_ip)):

    str_of_ip[i] = int(str_of_ip[i])

    if str_of_ip[i] > 255:

        flag = False

if flag: 
    print("ДА")
else:
    print("НЕТ")

#------------------------------------

# Упражнение №6

# Добавь разделитель

# На вход программе подаётся строка текста и строка-разделитель. Напишите программу, которая вставляет 
# указанный разделитель между каждым символом введённой строки текста.

# Формат входных данных
# На вход программе подаются строка текста и строка-разделитель, каждая на отдельной строке.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

str_one = input("Строка: ")
str_two = input("Разделитель: ")

list_one = list()

for i in str_one:

    list_one.append(i)

list_one = str_two.join(list_one)
print(list_one)